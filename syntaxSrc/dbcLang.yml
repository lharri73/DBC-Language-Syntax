###
# Copyright (C) 2021 Landon Harris
# This program is free software; you can redistribute it and/or 
# modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; version 2.
# 
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License 
# along with this program. If not, see 
# <https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html>.
###

name: DBC
scopeName: source.dbc
fileTypes: [dbc]

firstLineMatch: '^VERSION ".*?"\\s*$' # Match greedy

foldingStartMarker: 'BO_ .*'
foldingStopMarker: '^\s*$' # blank line

patterns:
- include: "#nonParsedComment"
- include: "#keywords"
# - include: "#strings"
- include: "#semicolon"
- include: "#new_symbols"
- include: "#bitTiming"
- include: "#nodeNames"
- include: "#valTable"
- include: "#messages"
- include: "#sigValType"
- include: "#msgTransmitters"
- include: "#valueDescriptions"
- include: "#sigGroup"
- include: "#officialComment"
- include: "#sgType"
- include: "#attribute"
- include: "#attributeRel"
- include: "#attributeDef"
- include: "#attributeDefDef"

repository:
  keywords:
    patterns:
    - name: keyword.other.dbc
      match: "^VERSION\\b" # match the version string at the start of DBC's
    - name: keyword.control.header.dbc
      match: "^NS_\\b"

  strings:
    name: string.quoted.double.dbc
    begin: "\""
    end: "\""
    patterns:
    - name: constant.character.escape.dbc
      match: "\\\\."

  new_symbols: 
    match: "^\\s*(BA_|\
                   NS_DESC_|\
                   CM_|\
                   BA_DEF_|\
                   VAL_|\
                   CAT_DEF_|\
                   CAT_|\
                   BA_DEF_DEF_|\
                   EV_DATA_|\
                   ENVVAR_DATA_|\
                   SGTYPE_|\
                   SGTYPE_VAL_|\
                   BA_DEF_SGTYPE_|\
                   BA_SGTYPE_|\
                   SIG_TYPE_REF_|\
                   VAL_TABLE_|\
                   SIG_GROUP_|\
                   SIG_VALTYPE_|\
                   SIGTYPE_VALTYPE_|\
                   BO_TX_BU_|\
                   BA_DEF_REL_|\
                   BA_REL_|\
                   BA_DEF_DEF_REL_|\
                   BU_SG_REL_|\
                   BU_EV_REL_|\
                   BU_BO_REL_|\
                   FILTER|\
                   SG_MUL_VAL_)$"
    captures: 
      1: 
        name: keyword.control.symbols.dbc

  ## This is probably terrible
  bitTiming:
    match: "^(BS_)\\s*(:?)\\s*(\\d*)\\s*(:?)\\s*(\\d*)\\s*(,?)\\s*(\\d*)"
    captures:
      1:
        name: keyword.control.bitTiming.dbc
      2:
        name: punctuation.qualifier.dbc
      3:
        name: constant.numeric.decimal.dbc
      4: 
        name: punctuation.qualifier.dbc
      5: 
        name: constant.numeric.decimal.dbc
      6: 
        name: punctuation.qualifier.dbc
      7: 
        name: constant.numeric.decimal.dbc
  
  nodeNames:
    match: "^(BU_)\\s*(:?)\\s*?((?:\\s\\w+)*)"
    captures:
      1:
        name: keyword.control.nodeNames.dbc
      2:
        name: punctuation.qualifier.dbc
      3:
        patterns:
          - name: variable.language.nodeName.dbc
            match: "\\w+"
        
  valTable:
    match: "^(VAL_TABLE_)\\s*(\\w+)(.*?)\\s*(;?)$"
    captures:
      1:
        name: keyword.control.valueTable.dbc
      2:
        name: variable.parameter.valTable.dbc
      3:
        patterns:
          - name: constant.numeric.decimal.dbc
            match: "\\d+"
          - include: "#strings"
      4: 
        name: punctuation.terminator.statement.dbc
    
  messages:
    begin: "^(BO_(?!\\w))\\s*(\\d*)\\s*(\\w*)\\s*(:?)\\s*(\\d*)\\s*(.*)"
    end: "^\\s*$"
    contentName: meta.message
    beginCaptures:
      1: 
        name: keyword.control.messageDef.dbc
      2:
        name: storage.type.id.dbc
      3:
        name: entity.name.msgName.dbc
      4:
        name: punctuation.qualifier.dbc
      5:
        name: constant.numeric.decimal.dbc
      6:
        patterns:
        - name: variable.language.nodeName.dbc      ## using this variable.language tag simply because
          match: "\\w*"                             ## it has a different style than
        - name: punctuation.comma.dbc               ## the regular parameter.
          match: ","

    patterns:
      - match: "^\\s*(SG_)\\s*(\\w*)\\s*(:?)\\s*(.*?[+-])?\\s*(\\(.*\\))?\\s*(\\[.*\\])?\\s*(\".*\")?\\s*((?(7).*|))$"
        captures:
          1:
            name: keyword.control.signal.dbc
          2: 
            name: variable.parameter.sigName.dbc meta.signal.name.dbc
          3:
            name: punctuation.qualifier.dbc
          4:
            patterns:
              - match: "(\\d*)(\\|?)(\\d*)(@?)([01]?)([+-]?)"
                captures:
                  1:
                    name: constant.numeric.decimal.dbc meta.signal.startBit.dbc
                  2:
                    name: punctuation.range.seperator.dbc
                  3:
                    name: constant.numeric.decimal.dbc meta.signal.length.dbc
                  4: 
                    name: punctuation.at.dbc
                  5:
                    name: constant.numeric.binary.dbc meta.signal.byteOrder.dbc
                  6: 
                    name: punctuation.sign.dbc meta.signal.signed.dbc
          5:
            patterns:
              - match: "(\\(?)((?>-?\\d+\\.?\\d*E?\\+?\\d*)?)\\s*(,?)\\s*((?>-?\\d+\\.?\\d*E?\\+?\\d*)?)\\s*(\\)?)"
                captures:
                  1:
                    name: punctuation.definition.factorOffset.start.dbc
                  2:
                    name: constant.numeric.decimal.dbc meta.signal.factor.dbc
                  3:
                    name: punctuation.comma.dbc
                  4:
                    name: constant.numeric.decimal.dbc meta.signal.offset.dbc
                  5:
                    name: punctuation.definition.factorOffset.end.dbc
          6:
            patterns:
              - match: "(\\[?)(-?\\d+\\.?\\d*E?\\+?\\d*)(\\|?)(-?\\d+\\.?\\d*E?\\+?\\d*)(\\]?)"
                captures:
                  1:
                    name: punctuation.definition.minMax.start.dbc
                  2:
                    name: constant.numeric.decimal.dbc mata.signal.minimum.dbc
                  3:
                    name: punctuation.range.seperator.dbc
                  4:
                    name: constant.numeric.decimal.dbc meta.signal.maximum.dbc
                  5:
                    name: punctuation.definition.minMax.end.dbc
          7:
            name: meta.signal.unit.dbc
            patterns:
              - include: "#strings"
          8:
            patterns:
            - name: variable.language.nodeName.dbc
              match: "\\w+"
            - name: punctuation.comma.dbc
              match: ","
  
  msgTransmitters:
    contentName: meta.messageTx
    begin: "(BO_TX_BU_(?!\\w))"
    end: "(;)"
    beginCaptures:
      1:
        name: keyword.control.messageTx.dbc
    endCaptures:
      1:
        name: punctuation.terminator.statement.dbc
    patterns:
      - name: storage.type.id.dbc
        match: "\\d+"
      - name: punctuation.qualifier.dbc
        match: ":"
      - name: variable.language.nodeName.dbc
        match: "\\w+"
      - name: punctuation.comma.dbc
        match: ","
  
  sigValType:
    match: "^\\s*(SIG_VALTYPE)\\s*(\\d*)\\s*(\\w*)\\s*(:?)\\s*(\\d?)\\s*(;?)"
    captures:
      1:
        name: keyword.control.sigValType.dbc
      2:
        name: variable.parameter.sigName.dbc meta.signal.name.dbc
      3:
        name: punctuation.qualifier.dbc
      4: 
        name: constant.numeric.decimal.dbc meta.signal.valType.dbc
      5:
        name: punctuation.terminator.statement.dbc

  valueDescriptions:
    begin: "^\\s*(VAL_(?!\\w))\\s*(\\d*)\\s*(\\w*)"
    end: "(;)"
    contentName: meta.valueDescription.dbc
    beginCaptures:
      1:
        name: keyword.control.valueDescription.dbc
      2:
        name: storage.type.id.dbc
      3:
        name: entity.name.msgName.dbc
    endCaptures:
      1:
        name: punctuation.terminator.statement.dbc
    patterns:
      - name: constant.numeric.decimal.dbc meta.valueDescription.key.dbc
        match: "\\d+"
      - begin: "\""
        end: "\""
        name: meta.valueDescription.value.dbc string.quoted.double.dbc
  
  sigGroup:
    begin: "^\\s*(SIG_GROUP_(?!\\w))\\s*(\\d*)\\s*(\\w*)\\s*(\\d*)\\s*(:?)"
    end: "(;)"
    contentName: meta.signalGroup.dbc
    beginCaptures:
      1:
        name: keyword.control.signalGroup.dbc
      2:
        name: storage.type.id.dbc
      3:
        name: entity.name.signalGroup.dbc
      4:
        name: constant.numeric.decimal.dbc meta.signalGroup.repititions.dbc
      5:
        name: punctuation.qualifier.dbc
    endCaptures:
      1:
        name: punctuation.terminator.statement.dbc
    patterns:
      - match: "\\w+"
        name: variable.parameter.sigName.dbc

  # This is a mess
  officialComment:
    begin: "^(CM_)"
    end: "(;)"
    contentName: meta.cmComment.dbc
    beginCaptures:
      1:
        name: keyword.control.cmComment.generic.dbc
    endCaptures:
      1:
        name: punctuation.terminator.statement.dbc
    patterns:
      - include: "#strings"
      - include: "#commentAdditions"
      - match: "(BO_|BU_|SG_|EV_|\\w+)"
        captures:
          1:
            patterns:
              - match: "(?<=CM_ )BO_"
                name: keyword.control.cmComment.messageComment.dbc
              - match: "(?<=CM_ )BU_"
                name: keyword.control.cmComment.nodeComment.dbc
              - match: "(?<=CM_ )SG_"
                name: keyword.control.cmComment.signalComment.dbc
              - match: "(?<=CM_ )EV_"
                name: keyword.control.cmComment.environmentComment.dbc
              - match: "(?<=CM_ )(?!(BO_|BU_|SG_|EV_))\\w+"
                name: string.quoted.double.dbc meta.cmComment.value.dbc

  sgType:
    begin: "^(SGTYPE)"
    end: "$"
    contentName: meta.signalType.dbc
    beginCaptures:
      1:
        name: keyword.control.signaltype.dbc
    patterns:
      - match: "(\\w*)\\s*(:?)\\s*(.*?[+-])?\\s*(\\(-?\\d+\\.?\\d*,?-?\\d+\\.?\\d*\\))?\\s*(\\[.*\\])?\\s*(\".*\")?\\s*(\\d+\\.?\\d*)\\s*(,?)\\s*(\\w*)\\s*(;?)$"
        captures:
          # 1:
          #   name: keyword.control.signal.dbc
          1: 
            name: variable.parameter.sigTypeName.dbc meta.signalType.name.dbc
          2:
            name: punctuation.qualifier.dbc
          3:
            patterns:
              - match: "(\\d*)(\\|?)([10]?)([+-]?)"
                captures:
                  1:
                    name: constant.numeric.decimal.dbc meta.signalType.signalSize.dbc
                  2:
                    name: punctuation.range.seperator.dbc
                  3:
                    name: constant.numeric.binary.dbc meta.signalType.byteOrder.dbc
                  4: 
                    name: punctuation.sign.dbc meta.signal.signed.dbc
          4:
            patterns:
              - match: "(\\(?)((?>-?\\d*\\.?\\d+)?)\\s*(,?)\\s*((?>-?\\d*\\.?\\d+)?)\\s*(\\)?)"
                captures:
                  1:
                    name: punctuation.definition.factorOffset.start.dbc
                  2:
                    name: constant.numeric.decimal.dbc meta.signalType.factor.dbc
                  3:
                    name: punctuation.comma.dbc
                  4:
                    name: constant.numeric.decimal.dbc meta.signalType.offset.dbc
                  5:
                    name: punctuation.definition.factorOffset.end.dbc
          5:
            patterns:
              - match: "(\\[?)(-?\\d+\\.?\\d*)(\\|?)(-?\\d+\\.?\\d*)(\\]?)"
                captures:
                  1:
                    name: punctuation.definition.minMax.start.dbc
                  2:
                    name: constant.numeric.decimal.dbc mata.signalType.minimum.dbc
                  3:
                    name: punctuation.range.seperator.dbc
                  4:
                    name: constant.numeric.decimal.dbc meta.signalType.maximum.dbc
                  5:
                    name: punctuation.definition.minMax.end.dbc
          6:
            name: meta.signal.unit.dbc
            patterns:
              - include: "#strings"
          7:
            name: constant.numeric.decimal.dbc meta.signalType.defaultVale
          8:
            name: punctuation.comma.dbc
          9:
            name: variable.parameter.valTable.dbc meta.signalType.valTable
          10:
            name: punctuation.terminator.statement.dbc

  attributeDef:
    begin: "^(BA_DEF_(?!\\w)|BA_DEF_REL_(?!\\w))"
    end: "$"
    contentName: meta.attributeDef.dbc
    beginCaptures:
      1:
        name: keyword.control.attributeDefault.dbc
    patterns:
      - match: "(BU_|BO_|SG_|EV_|BU_EV_REL_|BU_BO_REL_|BU_SG_REL_)?\\s*(\"\\w*\")\\s*(INT|HEX|FLOAT|STRING|ENUM)(.*)(;)"
        captures:
          1:
            name: keyword.control.attributeObject.dbc meta.attributeDefault.object.dbc
          2:
            name: variable.parameter.attributeDefault.dbc string.quoted.double.dbc meta.attributeDefault.name.dbc
          3:
            name: variable.language.attributeType.dbc
          4:
            patterns:
              - match: "\\d+\\.?\\d*"
                name: constant.numeric.decimal.dbc
              - include: "#strings"
              - match: ","
                name: punctuation.comma.dbc
          5:
            name: punctuation.terminator.statement.dbc

  attributeDefDef:
    begin: "^(BA_DEF_DEF_(?!\\w)|BA_DEF_DEF_REL_(?!\\w))"
    end: "$"
    contentName: meta.attributeDefDef.dbc # nope, not a typo. Just odd
    beginCaptures: 
      1:
        name: keyword.control.attributeDefaultDefault.dbc
    patterns:
      - match: "(\".*\")\\s+(.*)\\s*(;)"
        captures:
          1:
            name: variable.parameter.attributeDefault.dbc string.quoted.double.dbc meta.attributeDefaultDefault.name.dbc
          2:
            patterns:
              - match: "((\\d+\\.?\\d*)|(\".*\"))"
                captures:
                  2:
                    name: constant.numeric.decimal.dbc meta.attributeDefaultDefault.value.numeric.dbc
                  3:
                    name: string.quoted.double.dbc meta.attributeDefaultDefault.value.string.dbc
          3:
            name: punctuation.terminator.statement.dbc
  
  attribute:
    begin: "(BA_(?!\\w))"
    end: "$"
    contentName: meta.attribute.dbc
    beginCaptures:
      1:
        name: keyword.control.attribute.dbc
    patterns:
      - match: "(\".*\")\\s+(.*?)\\s*(;)"
        captures:
          1:
            name: variable.parameter.attribute.dbc string.quoted.double.dbc meta.attribute.key.dbc
          2:
            patterns:
              - match: "((BU_(?!\\w))|(BO_(?!\\w))|(SG_(?!\\w))|(EV_(?!\\w))|(\".+\"|\\d+\\.?\\d*))\\s*\
                        ((?(2).*|))((?(3).*|))((?(4).*|))((?(5).*|)((?(6).*|)))" # conditional expressions becase ba can change
                                                                                 # depending on the argument after the attribute
                captures:
                  2:
                    name: keyword.control.attributeObject.dbc meta.attributeObject.nodeName
                  3:
                    name: keyword.control.attributeObject.dbc meta.attributeObject.msgName
                  4:
                    name: keyword.control.attributeObject.dbc meta.attributeObject.signalName
                  5:
                    name: keyword.control.attributeObject.dbc meta.attributeObject.environmentVariable
                  6: 
                    patterns:
                      - match: "\\d+\\.?\\d*"
                        name: constant.numeric.decimal.dbc meta.attribute.value.numeric.dbc
                      - match: "\".*\""
                        name: string.quoted.double.dbc meta.attribute.value.string.dbc
                  7: # matched with BU_
                    patterns:
                      - include: "#strings"
                      - match: "\\d+\\.?\\d*"
                        name: constant.numeric.decimal.dbc meta.attribute.node.value.dbc
                      - match: "\\w+"
                        name: variable.language.nodeName.dbc
                  8: # matched with BO_
                    patterns:
                      - match: "(\\d*)\\s*(.*)"
                        captures:
                          1:
                            name: storage.type.id.dbc meta.attribute.describer.dbc
                          2:
                            patterns:
                              - match: "\".*\""
                                name: string.quoted.double.dbc meta.attribute.value.string.dbc
                              - match: "\\d+\\.?\\d*"
                                name: constant.numeric.decimal.dbc meta.attribute.value.numeric.dbc
                  9: # matched with SG_
                    patterns:
                      - match: "(\\d*)\\s*(\\w*)\\s*(.*)"
                        captures:
                          1:
                            name: storage.type.id.dbc meta.attribute.signal.msgId.dbc
                          2:
                            name: variable.parameter.sigName.dbc meta.attribute.signal.msgName.dbc
                          3:
                            patterns:
                              - match: "\".*\""
                                name: string.quoted.double.dbc meta.attribute.value.string.dbc
                              - match: "\\d+\\.?\\d*"
                                name: constant.numeric.decimal.dbc meta.attribute.value.numeric.dbc           
                  10: # matched with EV_
                    patterns:
                      - match: "(\\w*)\\s*(.*)"  
                        captures:
                          1:
                            name: variable.parameter.environmentVariable.dbc meta.attribute.environmentVariable.dbc
                          2:
                            patterns:
                              - match: "\".*\""
                                name: string.quoted.double.dbc meta.attribute.value.string.dbc
                              - match: "\\d+\\.?\\d*"
                                name: constant.numeric.decimal.dbc meta.attribute.value.numeric.dbc
          3:
            name: punctuation.terminator.statement.dbc

  attributeRel:
    begin: "(BA_REL_(?!\\w))"
    end: "$"
    contentName: meta.attributeRel.dbc
    beginCaptures:
      1:
        name: keyword.control.attributeRel.dbc
    patterns:
      - match: "(\".*\")\\s+(.*?)\\s*(;)"
        captures:
          1:
            name: variable.parameter.attributeRel.dbc string.quoted.double.dbc meta.attributeRel.key.dbc
          2:
            patterns:
              - match: "((BU_EV_REL_(?!\\w))|(BU_BO_REL_(?!\\w))|(BU_SG_REL_(?!\\w)))\\s*\
                        ((?(2).*|))((?(3).*|))((?(4).*|))" # conditional expressions becase ba can change
                                                                                 # depending on the argument after the attribute
                captures:
                  2:
                    name: keyword.control.attributeRelObject.dbc meta.attributeRelObject.environmentVariable
                  3:
                    name: keyword.control.attributeRelObject.dbc meta.attributeRelObject.nodeName
                  4:
                    name: keyword.control.attributeRelObject.dbc meta.attributeRelObject.signalName
                  5: # matched with BU_EV_REL_
                    patterns:
                      - match: "(\\w*)\\s*(\\w*)\\s*(.*)"
                        captures:
                          1:
                            name: variable.language.nodeName.dbc
                          2:
                            name: variable.parameter.environmentVariable.dbc
                          3:
                            patterns:
                              - match: "\\d+\\.?\\d*"
                                name: constant.numeric.decimal.dbc meta.attribute.value.numeric.dbc
                              - match: "\".*\""
                                name: string.quoted.double.dbc meta.attribute.value.string.dbc
                  6: # matched with BU_BO_REL_
                    patterns:
                      - match: "(\\w*)\\s*(\\d*)\\s*(.*)"
                        captures:
                          1:
                            name: variable.language.nodeName.dbc
                          2:
                            name: storage.type.id.dbc
                          3: 
                            patterns:
                              - match: "\\d+\\.?\\d*"
                                name: constant.numeric.decimal.dbc meta.attribute.value.numeric.dbc
                              - match: "\".*\""
                                name: string.quoted.double.dbc meta.attribute.value.string.dbc
                  7: # matched with BU_SG_REL
                    patterns:
                      - match: "(\\w*)\\s*(SG_?)\\s*(\\d*)\\s*(\\w*)\\s*(.*)"
                        captures:
                          1:
                            name: variable.language.nodeName.dbc meta.attribute.object.nodeName.dbc
                          2:
                            name: keyword.control.attributeObject.signal.dbc
                          3:
                            name: storage.type.id.dbc meta.attribute.object.messageId
                          4:
                            name: variable.parameter.sigName.dbc meta.attribute.object.signalName
                          5:
                            patterns:
                              - match: "\\d+\\.?\\d*"
                                name: constant.numeric.decimal.dbc meta.attribute.value.numeric.dbc
                              - match: "\".*\""
                                name: string.quoted.double.dbc meta.attribute.value.string.dbc

          3:
            name: punctuation.terminator.statement.dbc

  nonParsedComment:
    patterns: 
      - match: "//\\.*"
        name: comment.line.dbc

  commentAdditions:
    patterns:
      - match: "\\d+\\.?\\d*"
        name: storage.type.id.dbc
      - match: "(?<=(BU_\\s+))\\w+"
        name: variable.language.nodeName.dbc
      - match: "(?<=(\\d+\\s+))\\w+"
        name: variable.parameter.sigName.dbc
